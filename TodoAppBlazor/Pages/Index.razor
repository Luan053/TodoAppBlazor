@page "/"
@using TodoAppBlazor.Services;
@inject ITodoService _todoService;
@using Radzen


<PageTitle>To-do List</PageTitle>

<div style="padding: 20px;">
    <h4 style="color: #fafafa">Novo Item</h4>
    <TodoItemForm OnItemAdded="@ItemsChanged" />
</div>

<div style="padding: 20px; margin-top:20px">
    <div style="display: flex; flex-direction: column">
        @foreach (var todo in Todos)
        {
        <div class="flex-center" style="margin-bottom: 10px;">
            <div style="display:flex; align-items: center; margin-bottom: 10px;">
                <div class="@ItemClass(todo)" style="width: 280px; color: #fafafa">@todo.Text</div>

                @if (todo.Completed)
                {
                    <div style="width: 50px">
                            <RadzenButton Click=@(() => UncompletedeItem(todo)) Icon="remove_done" ButtonStyle="ButtonStyle.Danger" />
                    </div>
                }       
                        
                @if (!todo.Completed)
                {       
                    <div style="width: 50px">
                            <RadzenButton Click=@(() => CompleteItem(todo)) Icon="done" ButtonStyle="ButtonStyle.Success" />
                    </div>
                }

                <div>
                        <RadzenButton Click=@(() => DeleteItem(todo)) Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                </div>
                
            </div>

        </div>
        }
    </div>
</div>

@code {
private IList<TodoItem> Todos { get; set; } = new List<TodoItem>();

        protected override void OnInitialized()
        {
            Todos = _todoService.GetAll().ToList();
        }

        public string ItemClass (TodoItem item)
        {
            return item.Completed ? "item-completed" : "";
        }

        public void ItemsChanged()
        {
            Todos = _todoService.GetAll().ToList();
            StateHasChanged();
        }
        public void DeleteItem(TodoItem item)
        {
            _todoService.Delete(item);
            ItemsChanged();
        }
        public void CompleteItem(TodoItem item)
        {
            _todoService.Complete(item);
            ItemsChanged();
        }
    public void UncompletedeItem(TodoItem item)
    {
        _todoService.Uncompletede(item);
        ItemsChanged();
    }
}